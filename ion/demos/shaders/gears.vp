/**
Copyright 2017 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

attribute vec3 aVertex;
attribute vec3 aNormal;
attribute vec3 aInstancePosition;
attribute float aInstanceRotation;

varying vec3 vPosition;
varying vec3 vNormal;
varying vec3 vToLight;
varying vec3 vDiffuseColor;

uniform mat4 uProjectionMatrix;
uniform mat4 uModelviewMatrix;
uniform uint uGearCount;

vec3 HueToRGB(float hue) {
  vec3 h = vec3(hue, hue + 1.0/3.0, hue + 2.0/3.0);
  return clamp(6.0 * abs(h - floor(h) - 0.5) - 1.0, 0.0, 1.0);
}

void main() {
  vec3 light_pos = vec3(100., 100., 100.);
  float cos_rot = cos(aInstanceRotation);
  float sin_rot = sin(aInstanceRotation);
  mat3 gear_rot_matrix = mat3(vec3(cos_rot, 0, -sin_rot),
                              vec3(0, 1, 0),
                              vec3(sin_rot, 0, cos_rot));

  vec3 vertex_worldspace = gear_rot_matrix * aVertex + aInstancePosition;
  vNormal = gear_rot_matrix * aNormal;
  vToLight = light_pos - vertex_worldspace;

  vec4 position = uProjectionMatrix * uModelviewMatrix *
      vec4(vertex_worldspace, 1);
  gl_Position = position;
  vPosition = position.xyz;
  vec3 rainbow_color = HueToRGB(float(gl_InstanceID) / float(uGearCount));
  vDiffuseColor = 0.8 * rainbow_color + 0.2;
}
